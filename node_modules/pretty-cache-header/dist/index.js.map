{"version":3,"sources":["../src/cache-header.ts"],"sourcesContent":["import timestring from 'timestring';\n\ntype Millisecond = 'ms' | 'milli' | 'millisecond' | 'milliseconds';\ntype Second = 's' | 'sec' | 'secs' | 'second' | 'seconds';\ntype Minute = 'm' | 'min' | 'mins' | 'minute' | 'minutes';\ntype Hour = 'h' | 'hr' | 'hrs' | 'hour' | 'hours';\ntype Day = 'd' | 'day' | 'days';\ntype Week = 'w' | 'week' | 'weeks';\ntype Month = 'mon' | 'mth' | 'mths' | 'month' | 'months';\ntype Year = 'y' | 'yr' | 'yrs' | 'year' | 'years';\ntype TimeUnit = Year | Month | Week | Day | Hour | Minute | Second | Millisecond;\ntype TimeString = `${number}${TimeUnit}` | `${number} ${TimeUnit}`;\n\n/* -------------------------------------------------------------------------------------------------\n * cacheHeader\n * -----------------------------------------------------------------------------------------------*/\n\ntype CacheHeaderParams = {\n  /**\n   * The `max-age=N` **request directive** indicates that the client allows a stored response that\n   * is generated on the origin server within _N_ seconds — where _N_ may be any non-negative\n   * integer (including `0`).\n   *\n   * The `max-age=N` **response directive** indicates that the response remains\n   * [fresh](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#fresh_and_stale_based_on_age)\n   * until _N_ seconds after the response is generated.\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#max-age\n   */\n  maxAge?: TimeString;\n  /**\n   * The `max-stale=N` **request directive** indicates that the client allows a stored response\n   * that is [stale](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#fresh_and_stale_based_on_age)\n   * within _N_ seconds.\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#max-stale\n   */\n  maxStale?: TimeString;\n  /**\n   * The `min-fresh=N` **request directive** indicates that the client allows a stored response\n   * that is [fresh](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#fresh_and_stale_based_on_age)\n   * for at least _N_ seconds.\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#min-fresh\n   */\n  minFresh?: TimeString;\n  /**\n   * The `s-maxage` **response directive** also indicates how long the response is\n   * [fresh](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#fresh_and_stale_based_on_age) for (similar to `max-age`) —\n   * but it is specific to shared caches, and they will ignore `max-age` when it is present.\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#s-maxage\n   */\n  sMaxage?: TimeString;\n  /**\n   * The `no-cache` **request directive** asks caches to validate the response with the origin\n   * server before reuse. If you want caches to always check for content updates while reusing\n   * stored content, `no-cache` is the directive to use.\n   *\n   * The `no-cache` **response directive** indicates that the response can be stored in caches, but\n   * the response must be validated with the origin server before each reuse, even when the cache\n   * is disconnected from the origin server.\n   *\n   * `no-cache` allows clients to request the most up-to-date response even if the cache has a\n   * [fresh](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#fresh_and_stale_based_on_age)\n   * response.\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#no-cache\n   */\n  noCache?: true;\n  /**\n   * The `no-store` **request directive** allows a client to request that caches refrain from\n   * storing the request and corresponding response — even if the origin server's response could\n   * be stored.\n   *\n   * The `no-store` **response directive** indicates that any caches of any kind (private or shared)\n   * should not store this response.\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#no-store\n   */\n  noStore?: true;\n  /**\n   * `no-transform` indicates that any intermediary (regardless of whether it implements a cache)\n   * shouldn't transform the response contents.\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#no-transform\n   */\n  noTransform?: true;\n  /**\n   * The client indicates that cache should obtain an already-cached response. If a cache has\n   * stored a response, it's reused.\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#only-if-cached\n   */\n  onlyIfCached?: true;\n  /**\n   * The `must-revalidate` **response directive** indicates that the response can be stored in\n   * caches and can be reused while [fresh](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#fresh_and_stale_based_on_age).\n   * If the response becomes [stale](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#fresh_and_stale_based_on_age),\n   * it must be validated with the origin server before reuse.\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#must-revalidate\n   */\n  mustRevalidate?: true;\n  /**\n   * The `proxy-revalidate` **response directive** is the equivalent of `must-revalidate`, but\n   * specifically for shared caches only.\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#proxy-revalidate\n   */\n  proxyRevalidate?: true;\n  /**\n   * The `must-understand` **response directive** indicates that a cache should store the response\n   * only if it understands the requirements for caching based on status code.\n   *\n   * `must-understand` should be coupled with `no-store` for fallback behavior.\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#must-understand\n   */\n  mustUnderstand?: true;\n  /**\n   * The `private` **response directive** indicates that the response can be stored only in a\n   * private cache (e.g. local caches in browsers).\n   *\n   * You should add the `private` directive for user-personalized content, especially for responses\n   * received after login and for sessions managed via cookies.\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#private\n   */\n  private?: true;\n  /**\n   * The `public` **response directive** indicates that the response can be stored in a shared\n   * cache. Responses for requests with `Authorization` header fields must not be stored in a\n   * shared cache; however, the `public` directive will cause such responses to be stored in a\n   * shared cache.\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#public\n   */\n  public?: true;\n  /**\n   * The `immutable` **response directive** indicates that the response will not be updated while\n   * it's [fresh](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#fresh_and_stale_based_on_age).\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#public\n   */\n  immutable?: true;\n  /**\n   * The `stale-while-revalidate` **response directive** indicates that the cache could reuse a\n   * stale response while it revalidates it to a cache.\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#stale-while-revalidate\n   */\n  staleWhileRevalidate?: TimeString;\n  /**\n   * The `stale-if-error` **response directive** indicates that the cache can reuse a\n   * [stale response](https://developer.mozilla.org/en-US/docs/Web/HTTP/Caching#fresh_and_stale_based_on_age)\n   * when an upstream server generates an error, or when the error is generated locally. Here, an\n   * error is considered any response with a status code of 500, 502, 503, or 504.\n   *\n   * @link https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Cache-Control#stale-if-error\n   */\n  staleIfError?: TimeString;\n};\n\nfunction cacheHeader(params: CacheHeaderParams) {\n  const transformed = Object.entries(params).reduce((acc, [key, value]) => {\n    const kebabKey = key.replace(/[A-Z]/g, (char) => '-' + char.toLowerCase());\n    return typeof value === 'string' || value === true\n      ? [...acc, value === true ? kebabKey : `${kebabKey}=${timestring(value)}`]\n      : acc;\n  }, [] as string[]);\n\n  return transformed.join(', ');\n}\n\n/* ---------------------------------------------------------------------------------------------- */\n\nexport { cacheHeader };\n"],"mappings":";AAAA,OAAO,gBAAgB;AAoKvB,SAAS,YAAY,QAA2B;AAC9C,QAAM,cAAc,OAAO,QAAQ,MAAM,EAAE,OAAO,CAAC,KAAK,CAAC,KAAK,KAAK,MAAM;AACvE,UAAM,WAAW,IAAI,QAAQ,UAAU,CAAC,SAAS,MAAM,KAAK,YAAY,CAAC;AACzE,WAAO,OAAO,UAAU,YAAY,UAAU,OAC1C,CAAC,GAAG,KAAK,UAAU,OAAO,WAAW,GAAG,YAAY,WAAW,KAAK,GAAG,IACvE;AAAA,EACN,GAAG,CAAC,CAAa;AAEjB,SAAO,YAAY,KAAK,IAAI;AAC9B;","names":[]}